Rule/Option api

{
    - Rule/Opt before : must exec before exec current Rule/Opt
        * auto apply if not exists
    - Rule/Opt[] after: Rules/Opts may have after exec current Rule/Opt
        * throw if next Rule/Opt not have in declared
    - Rule/Opt[] equal: Rules/Opts has exec position is equal,
                        they can exist together ignore before
    - Rule/Opt[] overrides: Rules/Opts can be overridden by current Rule/Opt,
                        if they are exist together (include current)
    - Identifier id: support before/after
}

Pos:
    * Sorted
    * No duplicate
Neg:
    * Longer
    * Solid

Syntax:
    var req = static_type_name(val).rule/opt(...?).rule/opt(...?)

    ValidationResult/Validated/Result result = exec_class.static_method(val, req)

Example:
    [byte/short/int/long/float/double/integer/decimal]+Val(val)
        .nullable() // override not_null (by default)
        .min(val) // equal max()
        .max(val) // equal min()
        .range(min, max) // override min(), max()
        .equal(val) // override range()
        .negative(max (include)) // override max() + positive(), equal range(min, max)
        .positive(min (include)) // override min() + negative(), equal range(min, max)

new supported annotations

@Identified(
    type = Long. class,
    column = @Column(
        name = "id" // default
    ),
    access = @Access( AccessType.FIELD ),
    generatedValue = @GeneratedValue(
        strategy = GenerationType. IDENTITY
    ),
    annotations = {}
)
@SoftDelete(
    column = @Column(
        name = "deleted" // default
    ),
    access = @Access( AccessType.FIELD ),
    annotations = {}
)
@Request(
    responseType = Long. class,
    mapper = @ClassMapper(
        targetClass = Attribute. class,
        constructorParameters = {},
        methodName? = "map",
        reverseMethodName? = "map",
        (
            staticClass? = true,
            finalClass = true,
            finalMethod? = false,
            strategy? = GENERATE,
            className? = "AttributeRequestMapper"
        )
        <or/>
        (
            strategy? =  DECLARED,
            declaredClass? = AttributeRequestMapper.class
        )
    )
)
class ? implements Request<?> {

    @Generated
    public static final class AttributeRequestMapper
        implements RequestMapper<AttributeRequest, Attribute> {
        @Override
        public Attribute map(AttributeRequest request) {
            Attribute target = new Attribute();
            if (request.getId() == null) {
                throw new NullPointerException("id is null");
            }
            target.setId(AttributeTransform.transformId(request.getId()));
            target.setName(request.getName());
            ...
            return target;
        }
    }

    @Mapping(
        ( value? = "id", )
        <or/>
        ( targetField? = "id", )
        getterMethod? = "getId",
        setterMethod? = "setId",
        transform? = @Mapping.Transform(
            declaredClass? = AttributeTransform. class,
            staticMethod? = true,
            methodName? = "transformId"
        )
    )
    @NotNull
    private Object field;
}

//        ServletRequestAttributes sra = (ServletRequestAttributes)
//                RequestContextHolder.currentRequestAttributes();
//        System.out.println(sra.getRequest().getParameterMap());